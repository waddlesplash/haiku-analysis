diff --git a/src/system/kernel/elf.cpp b/src/system/kernel/elf.cpp
index f74be3f010..342a592b84 100644
--- a/src/system/kernel/elf.cpp
+++ b/src/system/kernel/elf.cpp
@@ -179,8 +179,8 @@ static struct elf_image_info *
 find_image_at_address(addr_t address)
 {
 #if KDEBUG
-	if (!debug_debugger_running())
-		ASSERT_LOCKED_MUTEX(&sImageMutex);
+//	if (!debug_debugger_running())
+//		ASSERT_LOCKED_MUTEX(&sImageMutex);
 #endif
 
 	ImageHash::Iterator iterator(sImagesHash);
diff --git a/src/system/kernel/heap.cpp b/src/system/kernel/heap.cpp
index a67a41ecc4..dcd48d814a 100644
--- a/src/system/kernel/heap.cpp
+++ b/src/system/kernel/heap.cpp
@@ -2486,30 +2486,6 @@ realloc(void *address, size_t newSize)
 #endif	// USE_DEBUG_HEAP_FOR_MALLOC
 
 
-void *
-calloc(size_t numElements, size_t size)
-{
-	if (size != 0 && numElements > (((size_t)(-1)) / size))
-		return NULL;
-
-	void *address = malloc(numElements * size);
-	if (address != NULL)
-		memset(address, 0, numElements * size);
-
-	return address;
-}
-
-
-void *
-aligned_alloc(size_t alignment, size_t size)
-{
-	if ((size % alignment) != 0)
-		return NULL;
-
-	return memalign(alignment, size);
-}
-
-
 void
 deferred_free(void *block)
 {
diff --git a/src/system/kernel/slab/allocator.cpp b/src/system/kernel/slab/allocator.cpp
index 4ba637501d..20c18aee2b 100644
--- a/src/system/kernel/slab/allocator.cpp
+++ b/src/system/kernel/slab/allocator.cpp
@@ -18,6 +18,7 @@
 #include <malloc.h>
 #include <vm/vm.h>
 #include <vm/VMAddressSpace.h>
+#include <elf.h>
 
 #include "ObjectCache.h"
 #include "MemoryManager.h"
@@ -73,7 +74,7 @@ size_to_index(size_t size)
 
 
 static void*
-block_alloc(size_t size, size_t alignment, uint32 flags)
+real_block_alloc(size_t size, size_t alignment, uint32 flags)
 {
 	if (alignment > kMinObjectAlignment) {
 		// Make size >= alignment and a power of two. This is sufficient, since
@@ -105,6 +106,30 @@ block_alloc(size_t size, size_t alignment, uint32 flags)
 	return block;
 }
 
+static void*
+block_alloc(size_t size, size_t alignment, uint32 flags, void* return_address)
+{
+#if 1
+	const char* symbolName = NULL, *imageName = NULL;
+	elf_debug_lookup_symbol_address((addr_t)return_address, NULL,
+		&symbolName, &imageName, NULL);
+
+	void* alloc = real_block_alloc(size, alignment, flags);
+	if (symbolName
+		//&& system_time() > 1000*1000*30
+		//&& size > 80 && size <= 96
+		&& strstr(symbolName, "_port_") == NULL
+		&& strstr(symbolName, "KMessage") == NULL
+		&& strcmp(imageName, "usb") != 0
+		&& strcmp(imageName, "xhci") != 0
+		)
+		dprintf("allocator:malloc(%" B_PRIuSIZE ") -> %p by <%s>%s\n", size, alloc, imageName, symbolName);
+	return alloc;
+#else
+	return real_block_alloc(size, alignment, flags);
+#endif
+}
+
 
 void*
 block_alloc_early(size_t size)
@@ -158,6 +183,25 @@ block_free(void* block, uint32 flags)
 		ASSERT(cache->object_size <= kBlockSizes[kNumBlockSizes - 1]);
 		ASSERT(cache == sBlockCaches[size_to_index(cache->object_size)]);
 		object_cache_free(cache, block, flags);
+
+#if 1
+	if (true
+		//|| cache->object_size != 96
+		//|| system_time() < 1000*1000*30
+		)
+		return;
+
+	const char* symbolName = NULL, *imageName = NULL;
+	elf_debug_lookup_symbol_address((addr_t)__builtin_return_address(0), NULL,
+		&symbolName, &imageName, NULL);
+	if (symbolName
+		&& strstr(symbolName, "_port_") == NULL
+		&& strstr(symbolName, "KMessage") == NULL
+		&& strcmp(imageName, "usb") != 0
+		&& strcmp(imageName, "xhci") != 0
+		)
+		dprintf("allocator:free(%p) by <%s>%s\n", block, imageName, symbolName);
+#endif
 	}
 }
 
@@ -207,14 +251,14 @@ block_allocator_init_rest()
 void*
 memalign(size_t alignment, size_t size)
 {
-	return block_alloc(size, alignment, 0);
+	return block_alloc(size, alignment, 0, __builtin_return_address(0));
 }
 
 
 void *
 memalign_etc(size_t alignment, size_t size, uint32 flags)
 {
-	return block_alloc(size, alignment, flags & CACHE_ALLOC_FLAGS);
+	return block_alloc(size, alignment, flags & CACHE_ALLOC_FLAGS, __builtin_return_address(0));
 }
 
 
@@ -223,7 +267,7 @@ posix_memalign(void** _pointer, size_t alignment, size_t size)
 {
 	if ((alignment & (sizeof(void*) - 1)) != 0 || _pointer == NULL)
 		return B_BAD_VALUE;
-	*_pointer = block_alloc(size, alignment, 0);
+	*_pointer = block_alloc(size, alignment, 0, __builtin_return_address(0));
 	return 0;
 }
 
@@ -243,7 +287,7 @@ free_etc(void *address, uint32 flags)
 void*
 malloc(size_t size)
 {
-	return block_alloc(size, 0, 0);
+	return block_alloc(size, 0, 0, __builtin_return_address(0));
 }
 
 
@@ -254,8 +298,8 @@ free(void* address)
 }
 
 
-void*
-realloc_etc(void* address, size_t newSize, uint32 flags)
+static void*
+real_realloc_etc(void* address, size_t newSize, uint32 flags, void* return_address)
 {
 	if (newSize == 0) {
 		block_free(address, flags);
@@ -263,7 +307,7 @@ realloc_etc(void* address, size_t newSize, uint32 flags)
 	}
 
 	if (address == NULL)
-		return block_alloc(newSize, 0, flags);
+		return block_alloc(newSize, 0, flags, return_address);
 
 	size_t oldSize;
 	ObjectCache* cache = MemoryManager::GetAllocationInfo(address, oldSize);
@@ -275,7 +319,7 @@ realloc_etc(void* address, size_t newSize, uint32 flags)
 	if (oldSize == newSize)
 		return address;
 
-	void* newBlock = block_alloc(newSize, 0, flags);
+	void* newBlock = block_alloc(newSize, 0, flags, return_address);
 	if (newBlock == NULL)
 		return NULL;
 
@@ -287,10 +331,38 @@ realloc_etc(void* address, size_t newSize, uint32 flags)
 }
 
 
+void*
+realloc_etc(void* address, size_t newSize, uint32 flags)
+{
+	return real_realloc_etc(address, newSize, flags, __builtin_return_address(0));
+}
+
+
 void*
 realloc(void* address, size_t newSize)
 {
-	return realloc_etc(address, newSize, 0);
+	return real_realloc_etc(address, newSize, 0, __builtin_return_address(0));
+}
+
+
+void *
+calloc(size_t numElements, size_t size)
+{
+	void *address = block_alloc(numElements * size, 0, 0, __builtin_return_address(0));
+	if (address != NULL)
+		memset(address, 0, numElements * size);
+
+	return address;
+}
+
+
+void *
+aligned_alloc(size_t alignment, size_t size)
+{
+	if ((size % alignment) != 0)
+		return NULL;
+
+	return block_alloc(size, alignment, 0, __builtin_return_address(0));
 }
 
 
