From 718f9f2b66d2763cc8947823c6ea26883380f76e Mon Sep 17 00:00:00 2001
From: Augustin Cavalier <waddlesplash@gmail.com>
Date: Wed, 29 May 2024 16:28:56 -0400
Subject: [PATCH] DoublyLinkedList: Assertions for duplicate insertion, missed
 removal, deletion while in a list, etc.

Required some hacks elsewhere in the kernel to make this bootable.
---
 .../private/kernel/util/DoublyLinkedList.h    | 44 ++++++++++++++++---
 .../kernel/network/stack/net_buffer.cpp       |  4 ++
 src/system/kernel/cache/block_cache.cpp       |  2 +-
 .../kernel/device_manager/dma_resources.cpp   |  4 ++
 src/system/kernel/port.cpp                    |  2 +-
 src/system/kernel/slab/MemoryManager.cpp      |  1 +
 src/system/kernel/slab/ObjectCache.cpp        |  4 ++
 src/system/kernel/vm/VMKernelArea.h           |  5 +++
 8 files changed, 59 insertions(+), 7 deletions(-)

diff --git a/headers/private/kernel/util/DoublyLinkedList.h b/headers/private/kernel/util/DoublyLinkedList.h
index 4824eb0913..60e09ff1ca 100644
--- a/headers/private/kernel/util/DoublyLinkedList.h
+++ b/headers/private/kernel/util/DoublyLinkedList.h
@@ -11,10 +11,11 @@
 #include <SupportDefs.h>
 
 #ifdef _KERNEL_MODE
-#	include <debug.h>
+#	include <kernel/debug.h>
 #	include <util/kernel_cpp.h>
 
 #	if !defined(_BOOT_MODE) && KDEBUG
+#		include <kernel.h>
 #		define DEBUG_DOUBLY_LINKED_LIST KDEBUG
 #	endif
 #endif
@@ -26,6 +27,15 @@
 template<typename Element>
 class DoublyLinkedListLink {
 public:
+#if DEBUG_DOUBLY_LINKED_LIST
+	DoublyLinkedListLink() : next(NULL), previous(NULL) {}
+	~DoublyLinkedListLink()
+	{
+		ASSERT_PRINT(next == NULL && previous == NULL,
+			"element: %p\n", this);
+	}
+#endif
+
 	Element*	next;
 	Element*	previous;
 };
@@ -328,7 +338,12 @@ public:
 
 public:
 	DoublyLinkedList() : fFirst(NULL), fLast(NULL) {}
-	~DoublyLinkedList() {}
+	~DoublyLinkedList()
+	{
+#if DEBUG_DOUBLY_LINKED_LIST
+		RemoveAll();
+#endif
+	}
 
 	inline bool IsEmpty() const			{ return (fFirst == NULL); }
 
@@ -395,12 +410,15 @@ void
 DOUBLY_LINKED_LIST_CLASS_NAME::Insert(Element* element, bool back)
 {
 	if (element) {
+		Link* elLink = sGetLink(element);
+
 #if DEBUG_DOUBLY_LINKED_LIST
 		ASSERT_PRINT(fFirst == NULL ? fLast == NULL : fLast != NULL,
 			"list: %p\n", this);
+		ASSERT_PRINT(elLink->previous == NULL && elLink->next == NULL,
+			"list: %p, element: %p\n", this, element);
 #endif
 
-		Link* elLink = sGetLink(element);
 		if (back) {
 			// append
 			elLink->previous = fLast;
@@ -435,13 +453,16 @@ DOUBLY_LINKED_LIST_CLASS_NAME::InsertBefore(Element* before, Element* element)
 		return;
 	}
 
+	Link* link = sGetLink(element);
+
 #if DEBUG_DOUBLY_LINKED_LIST
 	ASSERT_PRINT(fFirst == NULL ? fLast == NULL : fLast != NULL,
 		"list: %p\n", this);
+	ASSERT_PRINT(link->previous == NULL && link->next == NULL,
+		"list: %p, element: %p\n", this, element);
 #endif
 
 	Link* beforeLink = sGetLink(before);
-	Link* link = sGetLink(element);
 
 	link->next = before;
 	link->previous = beforeLink->previous;
@@ -465,13 +486,16 @@ DOUBLY_LINKED_LIST_CLASS_NAME::InsertAfter(Element* after, Element* element)
 		return;
 	}
 
+	Link* link = sGetLink(element);
+
 #if DEBUG_DOUBLY_LINKED_LIST
 	ASSERT_PRINT(fFirst == NULL ? fLast == NULL : fLast != NULL,
 		"list: %p\n", this);
+	ASSERT_PRINT(link->previous == NULL && link->next == NULL,
+		"list: %p, element: %p\n", this, element);
 #endif
 
 	Link* afterLink = sGetLink(after);
-	Link* link = sGetLink(element);
 
 	link->previous = after;
 	link->next = afterLink->next;
@@ -576,6 +600,16 @@ DOUBLY_LINKED_LIST_TEMPLATE_LIST
 void
 DOUBLY_LINKED_LIST_CLASS_NAME::RemoveAll()
 {
+#if DEBUG_DOUBLY_LINKED_LIST
+	Element* element = fFirst;
+	while (element) {
+		Link* elLink = sGetLink(element);
+		element = elLink->next;
+		elLink->previous = NULL;
+		elLink->next = NULL;
+	}
+#endif
+
 	fFirst = NULL;
 	fLast = NULL;
 }
diff --git a/src/add-ons/kernel/network/stack/net_buffer.cpp b/src/add-ons/kernel/network/stack/net_buffer.cpp
index cc4ae07bbe..0fe3c38920 100644
--- a/src/add-ons/kernel/network/stack/net_buffer.cpp
+++ b/src/add-ons/kernel/network/stack/net_buffer.cpp
@@ -1115,6 +1115,10 @@ create_buffer(size_t headerSpace)
 	list_init(&buffer->buffers);
 	list_add_item(&buffer->buffers, node);
 
+#if 1
+	buffer->link.prev = buffer->link.next = NULL;
+#endif
+
 	buffer->ancillary_data = NULL;
 	buffer->stored_header_length = 0;
 
diff --git a/src/system/kernel/cache/block_cache.cpp b/src/system/kernel/cache/block_cache.cpp
index 232add84d6..a9e7689f32 100644
--- a/src/system/kernel/cache/block_cache.cpp
+++ b/src/system/kernel/cache/block_cache.cpp
@@ -1511,7 +1511,7 @@ block_cache::NewBlock(off_t blockNumber)
 		block = _GetUnusedBlock();
 	}
 	if (block == NULL) {
-		block = (cached_block*)object_cache_alloc(sBlockCache, 0);
+		block = new(object_cache_alloc(sBlockCache, 0)) cached_block;
 		if (block != NULL) {
 			block->current_data = Allocate();
 			if (block->current_data == NULL) {
diff --git a/src/system/kernel/device_manager/dma_resources.cpp b/src/system/kernel/device_manager/dma_resources.cpp
index 62b712218a..a7bb95eee7 100644
--- a/src/system/kernel/device_manager/dma_resources.cpp
+++ b/src/system/kernel/device_manager/dma_resources.cpp
@@ -37,6 +37,10 @@ DMABuffer::Create(size_t count)
 	if (buffer == NULL)
 		return NULL;
 
+#if DEBUG_DOUBLY_LINKED_LIST
+	new(buffer) DMABuffer;
+#endif
+
 	buffer->fVecCount = count;
 
 	return buffer;
diff --git a/src/system/kernel/port.cpp b/src/system/kernel/port.cpp
index cacc36a330..c698819abf 100644
--- a/src/system/kernel/port.cpp
+++ b/src/system/kernel/port.cpp
@@ -732,7 +732,7 @@ get_port_message(int32 code, size_t bufferSize, uint32 flags, bigtime_t timeout,
 		}
 
 		// Quota is fulfilled, try to allocate the buffer
-		port_message* message = (port_message*)malloc(size);
+		port_message* message = new(malloc(size)) port_message;
 		if (message != NULL) {
 			message->code = code;
 			message->size = bufferSize;
diff --git a/src/system/kernel/slab/MemoryManager.cpp b/src/system/kernel/slab/MemoryManager.cpp
index b729235d00..6b69051ace 100644
--- a/src/system/kernel/slab/MemoryManager.cpp
+++ b/src/system/kernel/slab/MemoryManager.cpp
@@ -1361,6 +1361,7 @@ MemoryManager::_AllocateArea(uint32 flags, Area*& _area)
 	}
 
 	// init the area structure
+	new(area) Area;
 	area->vmArea = vmArea;
 	area->reserved_memory_for_mapping = pagesNeededToMap * B_PAGE_SIZE;
 	area->usedMetaChunkCount = 0;
diff --git a/src/system/kernel/slab/ObjectCache.cpp b/src/system/kernel/slab/ObjectCache.cpp
index 1b60e9c2a0..7355b6bb66 100644
--- a/src/system/kernel/slab/ObjectCache.cpp
+++ b/src/system/kernel/slab/ObjectCache.cpp
@@ -123,6 +123,10 @@ ObjectCache::InitSlab(slab* slab, void* pages, size_t byteCount, uint32 flags)
 	TRACE_CACHE(this, "construct (%p, %p .. %p, %lu)", slab, pages,
 		((uint8*)pages) + byteCount, byteCount);
 
+#if DEBUG_DOUBLY_LINKED_LIST
+	new(slab) ::slab();
+#endif
+
 	slab->pages = pages;
 	slab->count = slab->size = byteCount / object_size;
 	slab->free = NULL;
diff --git a/src/system/kernel/vm/VMKernelArea.h b/src/system/kernel/vm/VMKernelArea.h
index 0f64bdbf6d..686b2c2238 100644
--- a/src/system/kernel/vm/VMKernelArea.h
+++ b/src/system/kernel/vm/VMKernelArea.h
@@ -35,8 +35,13 @@ public:
 			addr_t									base;
 			uint32									flags;
 		} reserved;
+#if !DEBUG_DOUBLY_LINKED_LIST
 		DoublyLinkedListLink<VMKernelAddressRange>	freeListLink;
+#endif
 	};
+#if DEBUG_DOUBLY_LINKED_LIST
+	DoublyLinkedListLink<VMKernelAddressRange>	freeListLink;
+#endif
 	int												type;
 
 public:
-- 
2.25.1

