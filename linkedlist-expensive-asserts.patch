From debb00cbb05f3698ed4dd33d816ff04df8a38dfb Mon Sep 17 00:00:00 2001
From: Augustin Cavalier <waddlesplash@gmail.com>
Date: Mon, 27 Feb 2023 21:20:58 -0500
Subject: [PATCH] DoublyLinkedList: Assertions for duplicate insertion, missed
 removal, deletion while in a list, etc.

Required some hacks elsewhere in the kernel to make this bootable.
---
 .../private/kernel/util/DoublyLinkedList.h    | 72 +++++++++++++++----
 .../kernel/bluetooth/btCoreData/Jamfile       |  1 +
 src/add-ons/kernel/drivers/tty/tty.cpp        |  5 +-
 .../kernel/network/stack/net_buffer.cpp       |  4 ++
 src/system/kernel/cache/block_cache.cpp       |  2 +-
 .../kernel/device_manager/dma_resources.cpp   |  4 ++
 src/system/kernel/port.cpp                    |  2 +-
 src/system/kernel/slab/MemoryManager.cpp      |  1 +
 src/system/kernel/slab/ObjectCache.cpp        |  4 ++
 src/system/kernel/util/list.cpp               |  4 +-
 src/system/kernel/vm/VMKernelArea.h           |  5 ++
 11 files changed, 85 insertions(+), 19 deletions(-)

diff --git a/headers/private/kernel/util/DoublyLinkedList.h b/headers/private/kernel/util/DoublyLinkedList.h
index ce6845e3e2..086c3981ee 100644
--- a/headers/private/kernel/util/DoublyLinkedList.h
+++ b/headers/private/kernel/util/DoublyLinkedList.h
@@ -11,10 +11,11 @@
 #include <SupportDefs.h>
 
 #ifdef _KERNEL_MODE
-#	include <debug.h>
+#	include <kernel/debug.h>
 #	include <util/kernel_cpp.h>
 
 #	if !defined(_BOOT_MODE) && KDEBUG
+#		include <kernel.h>
 #		define DEBUG_DOUBLY_LINKED_LIST KDEBUG
 #	endif
 #endif
@@ -26,6 +27,15 @@
 template<typename Element>
 class DoublyLinkedListLink {
 public:
+#if DEBUG_DOUBLY_LINKED_LIST
+	DoublyLinkedListLink() : next(NULL), previous(NULL) {}
+	~DoublyLinkedListLink()
+	{
+		ASSERT_PRINT(next == NULL && previous == NULL,
+			"element: %p\n", this);
+	}
+#endif
+
 	Element*	next;
 	Element*	previous;
 };
@@ -328,7 +338,12 @@ public:
 
 public:
 	DoublyLinkedList() : fFirst(NULL), fLast(NULL) {}
-	~DoublyLinkedList() {}
+	~DoublyLinkedList()
+	{
+#if DEBUG_DOUBLY_LINKED_LIST
+		RemoveAll();
+#endif
+	}
 
 	inline bool IsEmpty() const			{ return (fFirst == NULL); }
 
@@ -393,14 +408,22 @@ void
 DOUBLY_LINKED_LIST_CLASS_NAME::Insert(Element* element, bool back)
 {
 	if (element) {
+		Link* elLink = sGetLink(element);
+
 #if DEBUG_DOUBLY_LINKED_LIST
 		ASSERT_PRINT(fFirst == NULL ? fLast == NULL : fLast != NULL,
 			"list: %p\n", this);
+#if defined(_KERNEL_MODE) && !defined(_BOOT_MODE)
+		if (!gKernelStartup)
+#endif
+		{
+			ASSERT_PRINT(elLink->previous == NULL && elLink->next == NULL,
+				"list: %p, element: %p\n", this, element);
+		}
 #endif
 
 		if (back) {
 			// append
-			Link* elLink = sGetLink(element);
 			elLink->previous = fLast;
 			elLink->next = NULL;
 			if (fLast)
@@ -410,7 +433,6 @@ DOUBLY_LINKED_LIST_CLASS_NAME::Insert(Element* element, bool back)
 			fLast = element;
 		} else {
 			// prepend
-			Link* elLink = sGetLink(element);
 			elLink->previous = NULL;
 			elLink->next = fFirst;
 			if (fFirst)
@@ -434,20 +456,23 @@ DOUBLY_LINKED_LIST_CLASS_NAME::InsertBefore(Element* before, Element* element)
 		return;
 	}
 
+	Link* elLink = sGetLink(element);
+
 #if DEBUG_DOUBLY_LINKED_LIST
 	ASSERT_PRINT(fFirst == NULL ? fLast == NULL : fLast != NULL,
 		"list: %p\n", this);
+	ASSERT_PRINT(elLink->previous == NULL && elLink->next == NULL,
+		"list: %p, element: %p\n", this, element);
 #endif
 
 	Link* beforeLink = sGetLink(before);
-	Link* link = sGetLink(element);
 
-	link->next = before;
-	link->previous = beforeLink->previous;
+	elLink->next = before;
+	elLink->previous = beforeLink->previous;
 	beforeLink->previous = element;
 
-	if (link->previous != NULL)
-		sGetLink(link->previous)->next = element;
+	if (elLink->previous != NULL)
+		sGetLink(elLink->previous)->next = element;
 	else
 		fFirst = element;
 }
@@ -460,14 +485,17 @@ DOUBLY_LINKED_LIST_CLASS_NAME::InsertAfter(Element* insertAfter,
 {
 	ASSERT(element != NULL);
 
+	Link* elLink = sGetLink(element);
+
 #if DEBUG_DOUBLY_LINKED_LIST
 	ASSERT_PRINT(fFirst == NULL ? fLast == NULL : fLast != NULL,
 		"list: %p\n", this);
+	ASSERT_PRINT(elLink->previous == NULL && elLink->next == NULL,
+		"list: %p, element: %p\n", this, element);
 #endif
 
 	if (insertAfter == NULL) {
 		// insert at the head
-		Link* elLink = sGetLink(element);
 		elLink->previous = NULL;
 		elLink->next = fFirst;
 		if (fFirst != NULL)
@@ -477,14 +505,13 @@ DOUBLY_LINKED_LIST_CLASS_NAME::InsertAfter(Element* insertAfter,
 		fFirst = element;
 	} else {
 		Link* afterLink = sGetLink(insertAfter);
-		Link* link = sGetLink(element);
 
-		link->previous = insertAfter;
-		link->next = afterLink->next;
+		elLink->previous = insertAfter;
+		elLink->next = afterLink->next;
 		afterLink->next = element;
 
-		if (link->next != NULL)
-			sGetLink(link->next)->previous = element;
+		if (elLink->next != NULL)
+			sGetLink(elLink->next)->previous = element;
 		else
 			fLast = element;
 	}
@@ -528,6 +555,11 @@ DOUBLY_LINKED_LIST_CLASS_NAME::Remove(Element* element)
 			sGetLink(elLink->next)->previous = elLink->previous;
 		else
 			fLast = elLink->previous;
+
+#if DEBUG_DOUBLY_LINKED_LIST
+		elLink->next = NULL;
+		elLink->previous = NULL;
+#endif
 	}
 }
 
@@ -578,6 +610,16 @@ DOUBLY_LINKED_LIST_TEMPLATE_LIST
 void
 DOUBLY_LINKED_LIST_CLASS_NAME::RemoveAll()
 {
+#if DEBUG_DOUBLY_LINKED_LIST
+	Element* element = fFirst;
+	while (element) {
+		Link* elLink = sGetLink(element);
+		element = elLink->next;
+		elLink->previous = NULL;
+		elLink->next = NULL;
+	}
+#endif
+
 	fFirst = NULL;
 	fLast = NULL;
 }
diff --git a/src/add-ons/kernel/bluetooth/btCoreData/Jamfile b/src/add-ons/kernel/bluetooth/btCoreData/Jamfile
index 62c839977e..d718acf050 100644
--- a/src/add-ons/kernel/bluetooth/btCoreData/Jamfile
+++ b/src/add-ons/kernel/bluetooth/btCoreData/Jamfile
@@ -1,5 +1,6 @@
 SubDir HAIKU_TOP src add-ons kernel bluetooth btCoreData ;
 
+UsePrivateKernelHeaders ;
 UsePrivateHeaders kernel net bluetooth ;
 UsePrivateHeaders [ FDirName kernel arch $(TARGET_KERNEL_ARCH_DIR) ] ;
 #UsePrivateHeaders [ FDirName kernel boot platform $(TARGET_KERNEL_PLATFORM) ] ;
diff --git a/src/add-ons/kernel/drivers/tty/tty.cpp b/src/add-ons/kernel/drivers/tty/tty.cpp
index edbd1da49d..de2c860fe5 100644
--- a/src/add-ons/kernel/drivers/tty/tty.cpp
+++ b/src/add-ons/kernel/drivers/tty/tty.cpp
@@ -1358,6 +1358,10 @@ status_t
 init_tty_cookie(tty_cookie* cookie, struct tty* tty, struct tty* otherTTY,
 	uint32 openMode)
 {
+#if DEBUG_DOUBLY_LINKED_LIST
+	new(cookie) tty_cookie;
+#endif
+
 	cookie->blocking_semaphore = create_sem(0, "wait for tty close");
 	if (cookie->blocking_semaphore < 0)
 		return cookie->blocking_semaphore;
@@ -1368,7 +1372,6 @@ init_tty_cookie(tty_cookie* cookie, struct tty* tty, struct tty* otherTTY,
 	cookie->thread_count = 0;
 	cookie->closed = false;
 
-
 	MutexLocker locker(cookie->tty->lock);
 
 	// add to the TTY's cookie list
diff --git a/src/add-ons/kernel/network/stack/net_buffer.cpp b/src/add-ons/kernel/network/stack/net_buffer.cpp
index cc4ae07bbe..0fe3c38920 100644
--- a/src/add-ons/kernel/network/stack/net_buffer.cpp
+++ b/src/add-ons/kernel/network/stack/net_buffer.cpp
@@ -1115,6 +1115,10 @@ create_buffer(size_t headerSpace)
 	list_init(&buffer->buffers);
 	list_add_item(&buffer->buffers, node);
 
+#if 1
+	buffer->link.prev = buffer->link.next = NULL;
+#endif
+
 	buffer->ancillary_data = NULL;
 	buffer->stored_header_length = 0;
 
diff --git a/src/system/kernel/cache/block_cache.cpp b/src/system/kernel/cache/block_cache.cpp
index b9fe29074e..36138b2151 100644
--- a/src/system/kernel/cache/block_cache.cpp
+++ b/src/system/kernel/cache/block_cache.cpp
@@ -1511,7 +1511,7 @@ block_cache::NewBlock(off_t blockNumber)
 		block = _GetUnusedBlock();
 	}
 	if (block == NULL) {
-		block = (cached_block*)object_cache_alloc(sBlockCache, 0);
+		block = new(object_cache_alloc(sBlockCache, 0)) cached_block;
 		if (block != NULL) {
 			block->current_data = Allocate();
 			if (block->current_data == NULL) {
diff --git a/src/system/kernel/device_manager/dma_resources.cpp b/src/system/kernel/device_manager/dma_resources.cpp
index 99d0d3a858..650ecd1782 100644
--- a/src/system/kernel/device_manager/dma_resources.cpp
+++ b/src/system/kernel/device_manager/dma_resources.cpp
@@ -37,6 +37,10 @@ DMABuffer::Create(size_t count)
 	if (buffer == NULL)
 		return NULL;
 
+#if DEBUG_DOUBLY_LINKED_LIST
+	new(buffer) DMABuffer;
+#endif
+
 	buffer->fVecCount = count;
 
 	return buffer;
diff --git a/src/system/kernel/port.cpp b/src/system/kernel/port.cpp
index cacc36a330..c698819abf 100644
--- a/src/system/kernel/port.cpp
+++ b/src/system/kernel/port.cpp
@@ -732,7 +732,7 @@ get_port_message(int32 code, size_t bufferSize, uint32 flags, bigtime_t timeout,
 		}
 
 		// Quota is fulfilled, try to allocate the buffer
-		port_message* message = (port_message*)malloc(size);
+		port_message* message = new(malloc(size)) port_message;
 		if (message != NULL) {
 			message->code = code;
 			message->size = bufferSize;
diff --git a/src/system/kernel/slab/MemoryManager.cpp b/src/system/kernel/slab/MemoryManager.cpp
index 35e68c4ba5..76ff3ff385 100644
--- a/src/system/kernel/slab/MemoryManager.cpp
+++ b/src/system/kernel/slab/MemoryManager.cpp
@@ -1351,6 +1351,7 @@ MemoryManager::_AllocateArea(uint32 flags, Area*& _area)
 	}
 
 	// init the area structure
+	new(area) Area;
 	area->vmArea = vmArea;
 	area->reserved_memory_for_mapping = pagesNeededToMap * B_PAGE_SIZE;
 	area->usedMetaChunkCount = 0;
diff --git a/src/system/kernel/slab/ObjectCache.cpp b/src/system/kernel/slab/ObjectCache.cpp
index 1b60e9c2a0..7355b6bb66 100644
--- a/src/system/kernel/slab/ObjectCache.cpp
+++ b/src/system/kernel/slab/ObjectCache.cpp
@@ -123,6 +123,10 @@ ObjectCache::InitSlab(slab* slab, void* pages, size_t byteCount, uint32 flags)
 	TRACE_CACHE(this, "construct (%p, %p .. %p, %lu)", slab, pages,
 		((uint8*)pages) + byteCount, byteCount);
 
+#if DEBUG_DOUBLY_LINKED_LIST
+	new(slab) ::slab();
+#endif
+
 	slab->pages = pages;
 	slab->count = slab->size = byteCount / object_size;
 	slab->free = NULL;
diff --git a/src/system/kernel/util/list.cpp b/src/system/kernel/util/list.cpp
index 7f7341172a..8d9fb3d0ce 100644
--- a/src/system/kernel/util/list.cpp
+++ b/src/system/kernel/util/list.cpp
@@ -72,9 +72,11 @@ void
 list_remove_link(void *_link)
 {
 	list_link *link = (list_link *)_link;
-	
+
 	link->next->prev = link->prev;
 	link->prev->next = link->next;
+
+	link->prev = link->next = NULL;
 }
 
 
diff --git a/src/system/kernel/vm/VMKernelArea.h b/src/system/kernel/vm/VMKernelArea.h
index 0f64bdbf6d..686b2c2238 100644
--- a/src/system/kernel/vm/VMKernelArea.h
+++ b/src/system/kernel/vm/VMKernelArea.h
@@ -35,8 +35,13 @@ public:
 			addr_t									base;
 			uint32									flags;
 		} reserved;
+#if !DEBUG_DOUBLY_LINKED_LIST
 		DoublyLinkedListLink<VMKernelAddressRange>	freeListLink;
+#endif
 	};
+#if DEBUG_DOUBLY_LINKED_LIST
+	DoublyLinkedListLink<VMKernelAddressRange>	freeListLink;
+#endif
 	int												type;
 
 public:
-- 
2.37.3

